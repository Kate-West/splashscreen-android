package com.example.splashscreen

import android.os.Bundle
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.core.content.ContextCompat

class NewsFragment : Fragment() {

    private lateinit var notificationStatusText: TextView
    private lateinit var soundStatusText: TextView

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        return inflater.inflate(R.layout.fragment_news, container, false)
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        val refreshButton = view.findViewById<Button>(R.id.refreshButton)
        notificationStatusText = view.findViewById(R.id.notificationStatusText)
        soundStatusText = view.findViewById(R.id.soundStatusText)

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        updateSettingsDisplay()

        refreshButton.setOnClickListener {
            val message = checkNotificationSettings()
            Toast.makeText(requireContext(), message, Toast.LENGTH_SHORT).show()

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            updateSettingsDisplay()
        }
    }

    private fun checkNotificationSettings(): String {
        val sharedPreferences = requireContext().getSharedPreferences("app_settings", 0)
        val notificationsEnabled = sharedPreferences.getBoolean("notifications_enabled", true)
        val soundEnabled = sharedPreferences.getBoolean("sound_enabled", true)

        return if (notificationsEnabled) {
            if (soundEnabled) {
                "üîî –ù–æ–≤–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã (—Å–æ –∑–≤—É–∫–æ–º)"
            } else {
                "üì¢ –ù–æ–≤–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã (–±–µ–∑ –∑–≤—É–∫–∞)"
            }
        } else {
            "üìµ –ù–æ–≤–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã)"
        }
    }

    private fun updateSettingsDisplay() {
        val sharedPreferences = requireContext().getSharedPreferences("app_settings", 0)
        val notificationsEnabled = sharedPreferences.getBoolean("notifications_enabled", true)
        val soundEnabled = sharedPreferences.getBoolean("sound_enabled", true)

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
        notificationStatusText.text = if (notificationsEnabled) {
            "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–ö–õ"
        } else {
            "üìµ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–´–ö–õ"
        }

        soundStatusText.text = if (soundEnabled) {
            "üîä –ó–≤—É–∫: –í–ö–õ"
        } else {
            "üîá –ó–≤—É–∫: –í–´–ö–õ"
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç–∞ –∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤
        val activeColor = ContextCompat.getColor(requireContext(), R.color.active_green)
        val inactiveColor = ContextCompat.getColor(requireContext(), R.color.inactive_red)

        notificationStatusText.setTextColor(
            if (notificationsEnabled) activeColor else inactiveColor
        )

        soundStatusText.setTextColor(
            if (soundEnabled) activeColor else inactiveColor
        )
    }
}